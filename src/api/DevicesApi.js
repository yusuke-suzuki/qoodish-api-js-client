/**
 * Qoodish API
 * Qoodish API JavaScript Client. 
 *
 * The version of the OpenAPI document: 0.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Devices service.
* @module api/DevicesApi
* @version 0.2.2
*/
export default class DevicesApi {

    /**
    * Constructs a new DevicesApi. 
    * @alias module:api/DevicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the devicesRegistrationTokenDelete operation.
     * @callback module:api/DevicesApi~devicesRegistrationTokenDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete device
     * Delete device with registration token.
     * @param {String} registrationToken A valid registration token.
     * @param {module:api/DevicesApi~devicesRegistrationTokenDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    devicesRegistrationTokenDelete(registrationToken, callback) {
      let postBody = null;
      // verify the required parameter 'registrationToken' is set
      if (registrationToken === undefined || registrationToken === null) {
        throw new Error("Missing the required parameter 'registrationToken' when calling devicesRegistrationTokenDelete");
      }

      let pathParams = {
        'registration_token': registrationToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/devices/{registration_token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesRegistrationTokenPut operation.
     * @callback module:api/DevicesApi~devicesRegistrationTokenPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register device
     * Register device with registration token.
     * @param {String} registrationToken A valid registration token.
     * @param {module:api/DevicesApi~devicesRegistrationTokenPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    devicesRegistrationTokenPut(registrationToken, callback) {
      let postBody = null;
      // verify the required parameter 'registrationToken' is set
      if (registrationToken === undefined || registrationToken === null) {
        throw new Error("Missing the required parameter 'registrationToken' when calling devicesRegistrationTokenPut");
      }

      let pathParams = {
        'registration_token': registrationToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/devices/{registration_token}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
