/**
 * Qoodish API
 * Qoodish API JavaScript Client. 
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InappropreateContent from '../model/InappropreateContent';

/**
* IssueContents service.
* @module api/IssueContentsApi
* @version 0.2.0
*/
export default class IssueContentsApi {

    /**
    * Constructs a new IssueContentsApi. 
    * @alias module:api/IssueContentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the inappropriateContentsPost operation.
     * @callback module:api/IssueContentsApi~inappropriateContentsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issue inappropriate content
     * Issue inappropriate content. 
     * @param {module:model/InappropreateContent} inappropreateContent 
     * @param {module:api/IssueContentsApi~inappropriateContentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    inappropriateContentsPost(inappropreateContent, callback) {
      let postBody = inappropreateContent;
      // verify the required parameter 'inappropreateContent' is set
      if (inappropreateContent === undefined || inappropreateContent === null) {
        throw new Error("Missing the required parameter 'inappropreateContent' when calling inappropriateContentsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/inappropriate_contents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
