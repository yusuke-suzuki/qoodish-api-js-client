/**
 * Qoodish API
 * Qoodish API JavaScript Client. 
 *
 * The version of the OpenAPI document: 0.2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NewReview from '../model/NewReview';
import Review from '../model/Review';

/**
* Reviews service.
* @module api/ReviewsApi
* @version 0.2.4
*/
export default class ReviewsApi {

    /**
    * Constructs a new ReviewsApi. 
    * @alias module:api/ReviewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapsMapIdReviewsGet operation.
     * @callback module:api/ReviewsApi~mapsMapIdReviewsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Review>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch map reviews
     * Fetch reviews on map. 
     * @param {Number} mapId A valid Map ID.
     * @param {Object} opts Optional parameters
     * @param {String} opts.placeId A valid Place ID.
     * @param {module:api/ReviewsApi~mapsMapIdReviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Review>}
     */
    mapsMapIdReviewsGet(mapId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling mapsMapIdReviewsGet");
      }

      let pathParams = {
        'map_id': mapId
      };
      let queryParams = {
        'place_id': opts['placeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Review];
      return this.apiClient.callApi(
        '/maps/{map_id}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsMapIdReviewsPost operation.
     * @callback module:api/ReviewsApi~mapsMapIdReviewsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Review} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create review
     * Create a new review. 
     * @param {Number} mapId A valid Map ID.
     * @param {module:model/NewReview} newReview 
     * @param {module:api/ReviewsApi~mapsMapIdReviewsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Review}
     */
    mapsMapIdReviewsPost(mapId, newReview, callback) {
      let postBody = newReview;
      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling mapsMapIdReviewsPost");
      }
      // verify the required parameter 'newReview' is set
      if (newReview === undefined || newReview === null) {
        throw new Error("Missing the required parameter 'newReview' when calling mapsMapIdReviewsPost");
      }

      let pathParams = {
        'map_id': mapId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Review;
      return this.apiClient.callApi(
        '/maps/{map_id}/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsMapIdReviewsReviewIdGet operation.
     * @callback module:api/ReviewsApi~mapsMapIdReviewsReviewIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Review} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch review
     * Fetch a review. 
     * @param {Number} mapId A valid Map ID.
     * @param {Number} reviewId A valid Review ID.
     * @param {module:api/ReviewsApi~mapsMapIdReviewsReviewIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Review}
     */
    mapsMapIdReviewsReviewIdGet(mapId, reviewId, callback) {
      let postBody = null;
      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling mapsMapIdReviewsReviewIdGet");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling mapsMapIdReviewsReviewIdGet");
      }

      let pathParams = {
        'map_id': mapId,
        'review_id': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Review;
      return this.apiClient.callApi(
        '/maps/{map_id}/reviews/{review_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsMapIdSpotsPlaceIdReviewsGet operation.
     * @callback module:api/ReviewsApi~mapsMapIdSpotsPlaceIdReviewsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Review>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch reviews on spot
     * Fetch reviews on spot. 
     * @param {Number} mapId A valid Map ID.
     * @param {String} placeId A valid Place ID.
     * @param {module:api/ReviewsApi~mapsMapIdSpotsPlaceIdReviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Review>}
     */
    mapsMapIdSpotsPlaceIdReviewsGet(mapId, placeId, callback) {
      let postBody = null;
      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling mapsMapIdSpotsPlaceIdReviewsGet");
      }
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling mapsMapIdSpotsPlaceIdReviewsGet");
      }

      let pathParams = {
        'map_id': mapId,
        'place_id': placeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Review];
      return this.apiClient.callApi(
        '/maps/{map_id}/spots/{place_id}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsGet operation.
     * @callback module:api/ReviewsApi~reviewsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Review>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch reviews
     * Fetch reviews. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextTimestamp Filter with timestamp.
     * @param {Boolean} opts.recent Filter recent reviews with this option.
     * @param {module:api/ReviewsApi~reviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Review>}
     */
    reviewsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'next_timestamp': opts['nextTimestamp'],
        'recent': opts['recent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Review];
      return this.apiClient.callApi(
        '/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsReviewIdDelete operation.
     * @callback module:api/ReviewsApi~reviewsReviewIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete review
     * Delete a review. 
     * @param {Number} reviewId A valid Review ID.
     * @param {module:api/ReviewsApi~reviewsReviewIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reviewsReviewIdDelete(reviewId, callback) {
      let postBody = null;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewsReviewIdDelete");
      }

      let pathParams = {
        'review_id': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reviews/{review_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsReviewIdPut operation.
     * @callback module:api/ReviewsApi~reviewsReviewIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Review} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update review
     * Update a review. 
     * @param {Number} reviewId A valid Review ID.
     * @param {module:model/NewReview} newReview 
     * @param {module:api/ReviewsApi~reviewsReviewIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Review}
     */
    reviewsReviewIdPut(reviewId, newReview, callback) {
      let postBody = newReview;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewsReviewIdPut");
      }
      // verify the required parameter 'newReview' is set
      if (newReview === undefined || newReview === null) {
        throw new Error("Missing the required parameter 'newReview' when calling reviewsReviewIdPut");
      }

      let pathParams = {
        'review_id': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Review;
      return this.apiClient.callApi(
        '/reviews/{review_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spotsPlaceIdReviewsGet operation.
     * @callback module:api/ReviewsApi~spotsPlaceIdReviewsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Review>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch spot reviews
     * Fetch spot reviews. 
     * @param {String} placeId A valid Place ID.
     * @param {module:api/ReviewsApi~spotsPlaceIdReviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Review>}
     */
    spotsPlaceIdReviewsGet(placeId, callback) {
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling spotsPlaceIdReviewsGet");
      }

      let pathParams = {
        'place_id': placeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Review];
      return this.apiClient.callApi(
        '/spots/{place_id}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdReviewsGet operation.
     * @callback module:api/ReviewsApi~usersUserIdReviewsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Review>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch user reviews
     * Fetch user reviews. 
     * @param {Number} userId A valid Map ID.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextTimestamp Filter with timestamp.
     * @param {module:api/ReviewsApi~usersUserIdReviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Review>}
     */
    usersUserIdReviewsGet(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdReviewsGet");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'next_timestamp': opts['nextTimestamp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Review];
      return this.apiClient.callApi(
        '/users/{user_id}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
