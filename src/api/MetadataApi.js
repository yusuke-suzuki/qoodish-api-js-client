/**
 * Qoodish API
 * Qoodish API JavaScript Client. 
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Metadata from '../model/Metadata';

/**
* Metadata service.
* @module api/MetadataApi
* @version 0.2.0
*/
export default class MetadataApi {

    /**
    * Constructs a new MetadataApi. 
    * @alias module:api/MetadataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapsMapIdMetadataGet operation.
     * @callback module:api/MetadataApi~mapsMapIdMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Map metadata
     * Get Map metadata. 
     * @param {Number} mapId A valid Map ID.
     * @param {String} acceptLanguage 
     * @param {module:api/MetadataApi~mapsMapIdMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metadata}
     */
    mapsMapIdMetadataGet(mapId, acceptLanguage, callback) {
      let postBody = null;
      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling mapsMapIdMetadataGet");
      }
      // verify the required parameter 'acceptLanguage' is set
      if (acceptLanguage === undefined || acceptLanguage === null) {
        throw new Error("Missing the required parameter 'acceptLanguage' when calling mapsMapIdMetadataGet");
      }

      let pathParams = {
        'map_id': mapId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': acceptLanguage
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metadata;
      return this.apiClient.callApi(
        '/maps/{map_id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsReviewIdMetadataGet operation.
     * @callback module:api/MetadataApi~reviewsReviewIdMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Review metadata
     * Get Review metadata. 
     * @param {Number} reviewId A valid Review ID.
     * @param {String} acceptLanguage 
     * @param {module:api/MetadataApi~reviewsReviewIdMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metadata}
     */
    reviewsReviewIdMetadataGet(reviewId, acceptLanguage, callback) {
      let postBody = null;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewsReviewIdMetadataGet");
      }
      // verify the required parameter 'acceptLanguage' is set
      if (acceptLanguage === undefined || acceptLanguage === null) {
        throw new Error("Missing the required parameter 'acceptLanguage' when calling reviewsReviewIdMetadataGet");
      }

      let pathParams = {
        'review_id': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': acceptLanguage
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metadata;
      return this.apiClient.callApi(
        '/reviews/{review_id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spotsPlaceIdMetadataGet operation.
     * @callback module:api/MetadataApi~spotsPlaceIdMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Spot metadata
     * Get Spot metadata. 
     * @param {String} placeId A valid Place ID.
     * @param {String} acceptLanguage 
     * @param {module:api/MetadataApi~spotsPlaceIdMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metadata}
     */
    spotsPlaceIdMetadataGet(placeId, acceptLanguage, callback) {
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling spotsPlaceIdMetadataGet");
      }
      // verify the required parameter 'acceptLanguage' is set
      if (acceptLanguage === undefined || acceptLanguage === null) {
        throw new Error("Missing the required parameter 'acceptLanguage' when calling spotsPlaceIdMetadataGet");
      }

      let pathParams = {
        'place_id': placeId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept-Language': acceptLanguage
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metadata;
      return this.apiClient.callApi(
        '/spots/{place_id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
