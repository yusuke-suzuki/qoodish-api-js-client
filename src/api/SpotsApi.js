/**
 * Qoodish API
 * Qoodish API JavaScript Client. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Spot from '../model/Spot';

/**
* Spots service.
* @module api/SpotsApi
* @version 0.0.1
*/
export default class SpotsApi {

    /**
    * Constructs a new SpotsApi. 
    * @alias module:api/SpotsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapsMapIdSpotsGet operation.
     * @callback module:api/SpotsApi~mapsMapIdSpotsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Spot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch spots on map
     * Fetch spots on target map. 
     * @param {Number} mapId A valid Map ID.
     * @param {module:api/SpotsApi~mapsMapIdSpotsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Spot>}
     */
    mapsMapIdSpotsGet(mapId, callback) {
      let postBody = null;
      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling mapsMapIdSpotsGet");
      }

      let pathParams = {
        'map_id': mapId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Spot];
      return this.apiClient.callApi(
        '/maps/{map_id}/spots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spotsGet operation.
     * @callback module:api/SpotsApi~spotsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Spot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch spots
     * Fetch spots. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.popular Filter popular spots with this option.
     * @param {module:api/SpotsApi~spotsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Spot>}
     */
    spotsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'popular': opts['popular']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Spot];
      return this.apiClient.callApi(
        '/spots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spotsPlaceIdGet operation.
     * @callback module:api/SpotsApi~spotsPlaceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a spot
     * Fetch a spot. 
     * @param {String} placeId A valid Place ID.
     * @param {module:api/SpotsApi~spotsPlaceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spot}
     */
    spotsPlaceIdGet(placeId, callback) {
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling spotsPlaceIdGet");
      }

      let pathParams = {
        'place_id': placeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebaseAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Spot;
      return this.apiClient.callApi(
        '/spots/{place_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
